 <!DOCTYPE html>
<html>
  <head>
    <style>
      .chessboard {
        display: grid;
        grid-template-columns: repeat(8, 50px);
      }

      .square {
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        background-color: white;
        cursor: pointer;
        position: relative;
      }

      .square.black {
        background-color: gray;
      }

      .king-check {
        background-color: red;
      }

      .dragged {
        position: absolute;
        z-index: 999;
        pointer-events: none;
      }

      .valid-move {
        background-color: lightgreen;
      }
    </style>
  </head>
  <body>
    <div class="chessboard" id="chessboard"></div>

    <script>
      const chessboard = document.getElementById('chessboard');
      const board = [];
      let selectedPiece = null;
      let currentPlayer = 'white';


function createChessboard() {
        let isBlack = false;

        for (let row = 0; row < 8; row++) {
          for (let col = 0; col < 8; col++) {
            const square = document.createElement('div');
            square.className = `square ${isBlack ? 'black' : ''}`;
            square.dataset.row = row;
            square.dataset.col = col;

            square.addEventListener('click', handleSquareClick);
            square.addEventListener('dragover', (event) => event.preventDefault());
            square.addEventListener('drop', handleDrop);
            board.push(square);
            chessboard.appendChild(square);
            isBlack = !isBlack;
          }
          isBlack = !isBlack;
        }
      }

      function setupPieces() {
        const startingPosition = [
          'r', 'n', 'b', 'q', 'k', 'b', 'n', 'r',
          'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p',
          '', '', '', '', '', '', '', '',
          '', '', '', '', '', '', '', '',
          '', '', '', '', '', '', '', '',
          '', '', '', '', '', '', '', '',
          'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P',
          'R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R',
        ];

        board.forEach((square, index) => {
          square.textContent = startingPosition[index];
        });
      }

      createChessboard();
      setupPieces();

      function handleSquareClick(event) {
        const square = event.target;
        const { row, col } = square.dataset;
        const piece = square.textContent;

        if (isCheckDisplayed) {
          // Hide "Check" if it's currently displayed
          isCheckDisplayed = false;
          removeCheckIndication();
        }

        if (selectedPiece) {
          const { row: selectedRow, col: selectedCol } = selectedPiece;
          if (isValidMove(selectedRow, selectedCol, row, col, piece)) {
            movePiece(selectedPiece, row, col);
            selectedPiece = null;
            currentPlayer = currentPlayer === 'white' ? 'black' : 'white';

            // Check if the king is in check
            if (isInCheck(currentPlayer)) {
              displayCheckIndication(currentPlayer);
            }
          } else {
            alert('Invalid move. Try again.');
          }
        } else {
          if (piece !== '' && piece[0] === currentPlayer[0]) {
            selectedPiece = { row, col };
          }
        }
      }

      function isValidMove(oldRow, oldCol, newRow, newCol, piece) {
        // Implement your logic for valid moves here
        const sourceSquare = board[oldRow * 8 + oldCol];
        const targetSquare = board[newRow * 8 + newCol];

        if (sourceSquare === targetSquare) {
          // You clicked on the same square
          return false;
        }

        if (piece === '' || piece[0] !== currentPlayer[0]) {
          // Invalid move, empty square or opponent's piece
          return false;
        }

        // Check specific piece movement rules here
        switch (piece[1].toLowerCase()) {
          case 'p':
            return isValidPawnMove(oldRow, oldCol, newRow, newCol, piece);
          case 'r':
            return isValidRookMove(oldRow, oldCol, newRow, newCol);
          case 'n':
            return isValidKnightMove(oldRow, oldCol, newRow, newCol);
          case 'b':
            return isValidBishopMove(oldRow, oldCol, newRow, newCol);
          case 'q':
            return isValidQueenMove(oldRow, oldCol, newRow, newCol);
          case 'k':
            return isValidKingMove(oldRow, oldCol, newRow, newCol);
          default:
            return false;
        }
      }

      function isValidPawnMove(oldRow, oldCol, newRow, newCol, piece) {
        // Implement pawn move validation
        // Your pawn move logic here
        const forward = piece[0] === 'w' ? -1 : 1;
        const isEnPassant = enPassantTarget && newRow == enPassantTarget.row && newCol == enPassantTarget.col;
        if (oldCol === newCol) {
          if (oldRow + forward === newRow && board[newRow * 8 + newCol].textContent === '') {
            return true;
          }
          if (piece[0] === 'w' && oldRow === 6 && oldRow + 2 * forward === newRow && board[newRow * 8 + newCol].textContent === '' && board[(newRow + 1) * 8 + newCol].textContent === '') {
            return true;
          }
          if (isEnPassant) {
            return true;
          }
        } else if (Math.abs(oldCol - newCol) == 1 && oldRow + forward === newRow) {
          if (board[newRow * 8 + newCol].textContent[0] === getOpponentColor(piece[0])) {
            return true;
          }
          if (isEnPassant) {
            return true;
          }
        }
        return false;
      }

      function isValidRookMove(oldRow, oldCol, newRow, newCol) {
        // Implement rook move validation
        if (oldRow === newRow) {
          // Horizontal move
          const step = oldCol < newCol ? 1 : -1;
          for (let col = oldCol + step; col != newCol; col += step) {
            if (board[oldRow * 8 + col].textContent !== '') {
              return false;
            }
          }
          return true;
        } else if (oldCol === newCol) {
          // Vertical move
          const step = oldRow < newRow ? 1 : -1;
          for (let row = oldRow + step; row != newRow; row += step) {
            if (board[row * 8 + oldCol].textContent !== '') {
              return false;
            }
          }
          return true;
        }
        return false;
      }

      function isValidKnightMove(oldRow, oldCol, newRow, newCol) {
        // Implement knight move validation
        const rowDiff = Math.abs(newRow - oldRow);
        const colDiff = Math.abs(newCol - oldCol);
        return (rowDiff === 2 && colDiff === 1) || (rowDiff === 1 && colDiff === 2);
      }

      function isValidBishopMove(oldRow, oldCol, newRow, newCol) {
        // Implement bishop move validation
        const rowDiff = Math.abs(newRow - oldRow);
        const colDiff = Math.abs(newCol - oldCol);
        return rowDiff === colDiff;
      }

      function isValidQueenMove(oldRow, oldCol, newRow, newCol) {
        // Implement queen move validation
        if (isValidRookMove(oldRow, oldCol, newRow, newCol) || isValidBishopMove(oldRow, oldCol, newRow, newCol)) {
          return true;
        }
        return false;
      }

      function isValidKingMove(oldRow, oldCol, newRow, newCol) {
        // Implement king move validation
        const rowDiff = Math.abs(newRow - oldRow);
        const colDiff = Math.abs(newCol - oldCol);
        return rowDiff <= 1 && colDiff <= 1;
      }

      function movePiece(piece, newRow, newCol) {
        const { row, col } = piece;
        const sourceSquare = board.find(
          (square) => square.dataset.row === row && square.dataset.col === col
        );
        const targetSquare = board.find(
          (square) => square.dataset.row === newRow && square.dataset.col === newCol
        );

        if (sourceSquare && targetSquare) {
          targetSquare.textContent = sourceSquare.textContent;
          sourceSquare.textContent = '';
        }
      }

      function isSquareOnBoard(row, col) {
        return row >= 0 && row < 8 && col >= 0 && col < 8;
      }

      function getOpponentColor(color) {
        return color === 'w' ? 'b' : 'w';
      }

      function isInCheck(player) {
        const opponent = getOpponentColor(player);
        const kingSquare = player === 'white' ? whiteKingSquare : blackKingSquare;

        for (const square of board) {
          if (square.textContent[0] === opponent) {
            const { row, col } = square.dataset;
            if (isValidMove(row, col, kingSquare.row, kingSquare.col, square.textContent)) {
              return true;
            }
          }
        }

        return false;
      }

      function displayCheckIndication(player) {
        const kingSquare = player === 'white' ? whiteKingSquare : blackKingSquare;
        const targetSquare = board[kingSquare.row * 8 + kingSquare.col];
        targetSquare.classList.add('king-check');
        isCheckDisplayed = true;
      }

      function removeCheckIndication() {
        const kingSquare = currentPlayer === 'white' ? whiteKingSquare : blackKingSquare;
        const targetSquare = board[kingSquare.row * 8 + kingSquare.col];
        targetSquare.classList.remove('king-check');
      }

      // Add event listeners to all squares to handle drag-and-drop
      board.forEach((square, index) => {
        square.draggable = true;

        square.addEventListener('dragstart', (event) => {
          if (square.textContent !== '' && square.textContent[0] === currentPlayer[0]) {
            draggablePiece = square;
            event.dataTransfer.setData('text', square.textContent);
            isDragging = true;
            validMoveSquares = getValidMoves(square);
            highlightValidMoves(validMoveSquares);
          }
        });

        square.addEventListener('dragover', (event) => event.preventDefault());
        square.addEventListener('drop', (event) => handleDrop(event, square));
      });

      function handleDrop(event, square) {
        event.preventDefault();
        if (isDragging && isValidMove(
          { row: +draggablePiece.dataset.row, col: +draggablePiece.dataset.col },
          { row: +square.dataset.row, col: +square.dataset.col },
          draggablePiece.textContent
        )) {
          square.textContent = draggablePiece.textContent;
          draggablePiece.textContent = '';
          isDragging = false;
          draggablePiece = null;
          currentPlayer = currentPlayer === 'white' ? 'black' : 'white';

          // Check if the king is in check
          if (isInCheck(currentPlayer)) {
            displayCheckIndication(currentPlayer);
          }
        }
        removeValidMoveHighlights();
      }

      function getValidMoves(piece) {
        const { row, col } = piece.dataset;
        const pieceType = piece.textContent[1].toLowerCase();
        const moves = [];

        function getValidMoves(params) {
          const moves = [];
          for (const move of getValidMovesInDirections(params)) {
            if (isSquareOnBoard(move.row, move.col)) {
              moves.push(move);
            }
          }
          return moves;
        }

        function getValidMovesInDirections({ row, col, textContent }) {
          const moves = [];

          // Check in all 8 possible directions (horizontal, vertical, diagonal)
          const directions = [
            { row: -1, col: 0 }, // Up
            { row: -1, col: 1 }, // Up-Right
            { row: 0, col: 1 },  // Right
            { row: 1, col: 1 },  // Down-Right
            { row: 1, col: 0 },  // Down
            { row: 1, col: -1 }, // Down-Left
            { row: 0, col: -1 }, // Left
            { row: -1, col: -1 } // Up-Left
          ];

          for (const direction of directions) {
            for (let i = 1; i < 8; i++) {
              const newRow = +row + direction.row * i;
              const newCol = +col + direction.col * i;
              if (isSquareOnBoard(newRow, newCol)) {
                const targetSquare = board[newRow * 8 + newCol];
                if (targetSquare.textContent === '') {
                  moves.push({ row: newRow, col: newCol });
                } else if (textContent[0] !== targetSquare.textContent[0]) {
                  moves.push({ row: newRow, col: newCol });
                  break; // Can't move through or beyond opponent's piece
                } else {
                  break; // Can't move through or beyond your own piece
                }
              }
            }
          }
          return moves;
        }

        if (pieceType === 'p') {
          moves.push({ row: +row - 1, col: +col }); // Move forward

          if (row === '6' && piece.textContent[0] === 'w') {
            moves.push({ row: +row - 2, col: +col }); // Double move from starting position
          }
          if (row === '1' && piece.textContent[0] === 'b') {
            moves.push({ row: +row + 2, col: +col }); // Double move from starting position
          }

          // Capture diagonally
          moves.push({ row: +row - 1, col: +col - 1 }); // Capture left
          moves.push({ row: +row - 1, col: +col + 1 }); // Capture right
        }

        if (pieceType === 'r') {
          // Rook can move vertically and horizontally
          moves.push(...getValidMoves({ row, col, textContent }));
        }

        if (pieceType === 'n') {
          // Knight can move in an L-shape
          const knightMoves = [
            { row: +row - 2, col: +col - 1 },
            { row: +row - 2, col: +col + 1 },
            { row: +row - 1, col: +col - 2 },
            { row: +row - 1, col: +col + 2 },
            { row: +row + 1, col: +col - 2 },
            { row: +row + 1, col: +col + 2 },
            { row: +row + 2, col: +col - 1 },
            { row: +row + 2, col: +col + 1 },
          ];

          moves.push(...knightMoves.filter((move) => isSquareOnBoard(move.row, move.col)));
        }

        if (pieceType === 'b') {
          // Bishop can move diagonally
          moves.push(...getValidMoves({ row, col, textContent }));
        }

        if (pieceType === 'q') {
          // Queen can move horizontally, vertically, and diagonally
          moves.push(...getValidMoves({ row, col, textContent }));
        }

        if (pieceType === 'k') {
          // King can move one square in any direction
          const kingMoves = [
            { row: +row - 1, col: +col - 1 },
            { row: +row - 1, col: +col },
            { row: +row - 1, col: +col + 1 },
            { row: +row, col: +col - 1 },
            { row: +row, col: +col + 1 },
            { row: +row + 1, col: +col - 1 },
            { row: +row + 1, col: +col },
            { row: +row + 1, col: +col + 1 },
          ];

          moves.push(...kingMoves.filter((move) => isSquareOnBoard(move.row, move.col)));
        }

        return moves;
      }

      function highlightValidMoves(moves) {
        for (const move of moves) {
          const targetSquare = board[move.row * 8 + move.col];
          targetSquare.classList.add('valid-move');
        }
      }

      function removeValidMoveHighlights() {
        for (const square of board) {
          square.classList.remove('valid-move');
        }
      }
    </script>
  </body>
</html>
